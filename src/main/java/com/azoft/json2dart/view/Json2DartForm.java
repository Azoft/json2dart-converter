package com.azoft.json2dart.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

import javax.swing.*;
import java.awt.*;

public class Json2DartForm {
    public JPanel rootView;
    public RSyntaxTextArea editor;
    public JButton generateButton;
    public JCheckBox finalFields;
    public JTextField fileName;
    public JLabel fileNameLabel;

    private OnGenerateClicked listener;

    public void setOnGenerateListener(OnGenerateClicked listener) {
        this.listener = listener;
        generateButton.addActionListener(action -> {
            if (this.listener != null) {
                this.listener.onClicked(
                    fileName != null ? fileName.getText() : "response",
                    editor != null ? editor.getText() : "",
                    finalFields != null && finalFields.isSelected()
                );
            }
        });
    }

    private void createUIComponents() {
        editor = Utils.buildRSyntaxTextArea(getClass());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootView = new JPanel();
        rootView.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        rootView.setPreferredSize(new Dimension(500, 500));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootView.add(scrollPane1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(editor);
        generateButton = new JButton();
        generateButton.setText("Generate");
        rootView.add(generateButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        finalFields = new JCheckBox();
        finalFields.setText("Make fields final");
        rootView.add(finalFields, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileName = new JTextField();
        rootView.add(fileName, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fileNameLabel = new JLabel();
        fileNameLabel.setText("Root file name:");
        rootView.add(fileNameLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootView;
    }

    public interface OnGenerateClicked {
        void onClicked(String fileName, String json, Boolean finalFields);
    }

}
